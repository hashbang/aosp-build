#!/bin/bash
[ -f /.dockerenv ] || { echo "please run in supplied container"; exit 1; }
set -e; eval "$(environment)"

device="${DEVICE?}"
base_dir="${BASE_DIR?}"
build_type="${BUILD_TYPE?}"
build_id="${BUILD_ID?}"
build_variant="${BUILD_VARIANT?}"
external_dir="${EXTERNAL_DIR?}"
overlay_dir="${OVERLAY_DIR?}"
patch_dir="${PATCH_DIR?}"
kernel_name="${KERNEL_NAME?}"
kernel_repo="${KERNEL_REPO?}"
factory_build="${FACTORY_BUILD?}"
platform_patches="${PLATFORM_PATCHES?}"
key_dir="${KEY_DIR?}"
cores=$(nproc)
build_chromium="${BUILD_CHROMIUM?}"

function build_external(){
	local vendor_dist="${external_dir}/vendor/out/${device}/${factory_build}/vendor/"
	local vendor_dest="${base_dir}/vendor/"
	[ -d "${vendor_dist}" ] || build-vendor
	sudo rm -rf "${vendor_dest}"
	cp -R "${vendor_dist}." "${vendor_dest}"

	if [ "$build_chromium" == "true"  ]; then
		local chromium_dist="${external_dir}/chromium/src/out/Default/apks/"
		local chromium_dest="${base_dir}/external/chromium/prebuilt/arm64/"
		[ -d "${chromium_dist}" ] || build-chromium
		mkdir -p "${chromium_dest}" || :
		cp -R \
			"$overlay_dir/external/chromium/." \
			"$base_dir/external/chromium/"
		cp -R "${chromium_dist}." "${chromium_dest}"
	fi

	local kernel_dir="${external_dir}/kernel/${kernel_name}"
	if [[ $kernel_repo == *"manifest"* ]]; then
		local kernel_dist="${kernel_dir}/dist/"
	else
		local kernel_dist="${kernel_dir}/out/android-msm-${kernel_name}-4.9/dist/"
	fi
	local kernel_dest="${base_dir}/device/google/${device}-kernel/"
	mkdir -p "${kernel_dest}"
	[ -d "$kernel_dist" ] || build-kernel
	cp -R "${kernel_dist}." "${kernel_dest}"
}

function apply_patches(){
	cd "${base_dir}"
	local fdroid_org="packages/apps/F-DroidPrivilegedExtension/app/src/main/java/org"
	local fdroid_whitelist="${fdroid_org}/fdroid/fdroid/privileged/ClientWhitelist.java"
	local platform_key_hash; platform_key_hash=$( \
		openssl x509 -in "${key_dir}/platform.x509.pem" -outform DER \
		| sha256sum | cut -c1-64; \
	)
	echo "Platform Key Hash: ${platform_key_hash}"
	for patch in ${platform_patches//,/ }; do
		echo "Applying patch: $patch_dir/${patch}"
		patch -p1 --no-backup-if-mismatch < "${patch_dir}/${patch}"
	done
	if [ -f "${base_dir}/${fdroid_whitelist}" ]; then
		echo "patching file ${fdroid_whitelist}"
		sed -i \
			"s/[a-f0-9]\\{64\\}/${platform_key_hash}/g" \
			"${base_dir}/${fdroid_whitelist}"
	fi
	echo "export BUILD_ID=${build_id}" > "${base_dir}/build/core/build_id.mk"
	cd -
}

function build_platform(){
	cd "$base_dir"
	choosecombo "${build_type}" "aosp_${device}" "${build_variant}"
	make -j "${cores}" target-files-package brillo_update_payload
	cd -
}

function main(){
	apply_patches
	build_external
	build_platform
}; main
